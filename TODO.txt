epydoc -v fanfic2ebook --exclude-introspect=winpaths

fanfic2ebook rework plans:
- Obey all the "@todo: Implement" notes in the Story and Chapter metadata fields.
- <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" > (http://dublincore.org/documents/dc-html/)
- Actually store all this data in the on-disk format in a form that can be re-loaded. Probably the following meta tags:
    - DC.source (Source series. One <meta> element per entry.)
- Don't forget to include a versioning meta element in case I need to make an incompatible break in the future.
- Consider setting DC.subject to the genre(s) of the story if available.
- Find an element most appropriate to specifying membership in a series if known.
    - http://dublincore.org/documents/usageguide/elements.shtml
    - http://vancouver-webpages.com/META/metatags.detail.html
    - http://dublincore.org/documents/usageguide/qualifiers.shtml
    - http://www.w3.org/TR/html401/struct/global.html#h-7.4.4.2
    - http://www.techmynd.com/meta-tags-list/
    - http://dublincore.org/documents/dc-html/
    - http://calibre-ebook.com/user_manual/cli/ebook-convert-3.html#metadata
- Overall goal: As much data as possible should be stored in individual chapter and --bundle files in a form that can be reloaded for cache purposes.
- Consider using my own extension to Dublin Core for storing non-DC metadata

Dublin Core values are authoritative when Fanfic2Ebook is reloading the data and it has been duplicated to older <meta> names.
TODO: How should it behave if story-scoped data changes on the web? Ignore changes and use cached values? load from the last file written?

Stuff needed to fill out current data tables:
- Make sure I'm storing both the current chapter and the max chapter (for intuiting Chap Read. X of Y)
- Extract completion status
- Extract categories to populate the sources field
- Make sure I can get both the author name and author URL

Stuff for planned table improvements:
- Extract story summary

Stuff for potential table improvements:
- Extract word count _if available_
- Awards, if specified in an extractible form (eg. CoA)

Consider extracting everything else available just in case I need it (rating, language, genre, pairing(s), review count, recs, update/publish dates, hits,

--book-producer
Set the book producer.
--cover
Set the cover to the specified file or URL
--isbn
Set the ISBN of the book.
--pubdate
Set the publication date.
--series
Set the series this ebook belongs to.
--series-index
Set the index of the book in this series.
--tags
Set the tags for the book. Should be a comma separated list.
--timestamp
Set the book timestamp (used by the date column in calibre).
